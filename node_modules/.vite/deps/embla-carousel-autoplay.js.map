{
  "version": 3,
  "sources": ["../../embla-carousel-autoplay/src/components/Options.ts", "../../embla-carousel-autoplay/src/components/Autoplay.ts"],
  "sourcesContent": ["import { CreateOptionsType } from 'embla-carousel/components/Options'\n\nexport type OptionsType = CreateOptionsType<{\n  delay: number\n  jump: boolean\n  playOnInit: boolean\n  stopOnFocusIn: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n  rootNode: ((emblaRoot: HTMLElement) => HTMLElement | null) | null\n}>\n\nexport const defaultOptions: OptionsType = {\n  active: true,\n  breakpoints: {},\n  delay: 4000,\n  jump: false,\n  playOnInit: true,\n  stopOnFocusIn: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n  rootNode: null\n}\n", "import { OptionsType, defaultOptions } from './Options'\nimport { CreatePluginType } from 'embla-carousel/components/Plugins'\nimport { OptionsHandlerType } from 'embla-carousel/components/OptionsHandler'\nimport { EmblaCarouselType } from 'embla-carousel'\n\ndeclare module 'embla-carousel/components/Plugins' {\n  interface EmblaPluginsType {\n    autoplay?: AutoplayType\n  }\n}\n\ndeclare module 'embla-carousel/components/EventHandler' {\n  interface EmblaEventListType {\n    autoplayPlay: 'autoplay:play'\n    autoplayStop: 'autoplay:stop'\n  }\n}\n\nexport type AutoplayType = CreatePluginType<\n  {\n    play: (jump?: boolean) => void\n    stop: () => void\n    reset: () => void\n    isPlaying: () => boolean\n  },\n  OptionsType\n>\n\nexport type AutoplayOptionsType = AutoplayType['options']\n\nfunction Autoplay(userOptions: AutoplayOptionsType = {}): AutoplayType {\n  let options: OptionsType\n  let emblaApi: EmblaCarouselType\n  let destroyed: boolean\n  let playing = false\n  let resume = true\n  let jump = false\n  let animationFrame = 0\n  let timer = 0\n\n  function init(\n    emblaApiInstance: EmblaCarouselType,\n    optionsHandler: OptionsHandlerType\n  ): void {\n    emblaApi = emblaApiInstance\n\n    const { mergeOptions, optionsAtMedia } = optionsHandler\n    const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions)\n    const allOptions = mergeOptions(optionsBase, userOptions)\n    options = optionsAtMedia(allOptions)\n\n    if (emblaApi.scrollSnapList().length <= 1) return\n\n    jump = options.jump\n    destroyed = false\n\n    const { eventStore, ownerDocument } = emblaApi.internalEngine()\n    const emblaRoot = emblaApi.rootNode()\n    const root = (options.rootNode && options.rootNode(emblaRoot)) || emblaRoot\n\n    emblaApi.on('pointerDown', clearTimer)\n\n    if (!options.stopOnInteraction) {\n      emblaApi.on('pointerUp', startTimer)\n    }\n\n    if (options.stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', () => {\n        resume = false\n        clearTimer()\n      })\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'mouseleave', () => {\n          resume = true\n          startTimer()\n        })\n      }\n    }\n\n    if (options.stopOnFocusIn) {\n      eventStore.add(root, 'focusin', clearTimer)\n\n      if (!options.stopOnInteraction) {\n        eventStore.add(root, 'focusout', startTimer)\n      }\n    }\n\n    eventStore.add(ownerDocument, 'visibilitychange', () => {\n      if (ownerDocument.visibilityState === 'hidden') {\n        resume = playing\n        return clearTimer()\n      }\n\n      if (resume) startTimer()\n    })\n\n    if (options.playOnInit) {\n      emblaApi.on('init', startTimer).on('reInit', startTimer)\n    }\n  }\n\n  function destroy(): void {\n    destroyed = true\n    playing = false\n    emblaApi.off('init', startTimer).off('reInit', startTimer)\n    emblaApi.off('pointerDown', clearTimer)\n    if (!options.stopOnInteraction) emblaApi.off('pointerUp', startTimer)\n    clearTimer()\n    cancelAnimationFrame(animationFrame)\n    animationFrame = 0\n  }\n\n  function startTimer(): void {\n    if (destroyed) return\n    if (!resume) return\n    if (!playing) emblaApi.emit('autoplay:play')\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearInterval(timer)\n    timer = ownerWindow.setInterval(next, options.delay)\n    playing = true\n  }\n\n  function clearTimer(): void {\n    if (destroyed) return\n    if (playing) emblaApi.emit('autoplay:stop')\n    const { ownerWindow } = emblaApi.internalEngine()\n    ownerWindow.clearInterval(timer)\n    timer = 0\n    playing = false\n  }\n\n  function play(jumpOverride?: boolean): void {\n    if (typeof jumpOverride !== 'undefined') jump = jumpOverride\n    resume = true\n    startTimer()\n  }\n\n  function stop(): void {\n    if (playing) clearTimer()\n  }\n\n  function reset(): void {\n    if (playing) play()\n  }\n\n  function isPlaying(): boolean {\n    return playing\n  }\n\n  function next(): void {\n    animationFrame = requestAnimationFrame(() => {\n      const { index } = emblaApi.internalEngine()\n      const nextIndex = index.clone().add(1).get()\n      const lastIndex = emblaApi.scrollSnapList().length - 1\n      const kill = options.stopOnLastSnap && nextIndex === lastIndex\n\n      if (kill) clearTimer()\n\n      if (emblaApi.canScrollNext()) {\n        emblaApi.scrollNext(jump)\n      } else {\n        emblaApi.scrollTo(0, jump)\n      }\n    })\n  }\n\n  const self: AutoplayType = {\n    name: 'autoplay',\n    options: userOptions,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n    isPlaying\n  }\n  return self\n}\n\nAutoplay.globalOptions = <AutoplayOptionsType | undefined>undefined\n\nexport default Autoplay\n"],
  "mappings": ";AAaO,IAAMA,iBAA8B;EACzCC,QAAQ;EACRC,aAAa,CAAA;EACbC,OAAO;EACPC,MAAM;EACNC,YAAY;EACZC,eAAe;EACfC,mBAAmB;EACnBC,kBAAkB;EAClBC,gBAAgB;EAChBC,UAAU;;ACOZ,SAASC,SAASC,cAAmC,CAAA,GAAE;AACrD,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC,UAAU;AACd,MAAIC,SAAS;AACb,MAAIb,OAAO;AACX,MAAIc,iBAAiB;AACrB,MAAIC,QAAQ;AAEZ,WAASC,KACPC,kBACAC,gBAAkC;AAElCR,eAAWO;AAEX,UAAM;MAAEE;MAAcC;IAAgB,IAAGF;AACzC,UAAMG,cAAcF,aAAavB,gBAAgBW,SAASe,aAAa;AACvE,UAAMC,aAAaJ,aAAaE,aAAab,WAAW;AACxDC,cAAUW,eAAeG,UAAU;AAEnC,QAAIb,SAASc,eAAc,EAAGC,UAAU;AAAG;AAE3CzB,WAAOS,QAAQT;AACfW,gBAAY;AAEZ,UAAM;MAAEe;MAAYC;IAAa,IAAKjB,SAASkB,eAAc;AAC7D,UAAMC,YAAYnB,SAASJ,SAAQ;AACnC,UAAMwB,OAAQrB,QAAQH,YAAYG,QAAQH,SAASuB,SAAS,KAAMA;AAElEnB,aAASqB,GAAG,eAAeC,UAAU;AAErC,QAAI,CAACvB,QAAQN,mBAAmB;AAC9BO,eAASqB,GAAG,aAAaE,UAAU;IACpC;AAED,QAAIxB,QAAQL,kBAAkB;AAC5BsB,iBAAWQ,IAAIJ,MAAM,cAAc,MAAK;AACtCjB,iBAAS;AACTmB,mBAAU;MACZ,CAAC;AAED,UAAI,CAACvB,QAAQN,mBAAmB;AAC9BuB,mBAAWQ,IAAIJ,MAAM,cAAc,MAAK;AACtCjB,mBAAS;AACToB,qBAAU;QACZ,CAAC;MACF;IACF;AAED,QAAIxB,QAAQP,eAAe;AACzBwB,iBAAWQ,IAAIJ,MAAM,WAAWE,UAAU;AAE1C,UAAI,CAACvB,QAAQN,mBAAmB;AAC9BuB,mBAAWQ,IAAIJ,MAAM,YAAYG,UAAU;MAC5C;IACF;AAEDP,eAAWQ,IAAIP,eAAe,oBAAoB,MAAK;AACrD,UAAIA,cAAcQ,oBAAoB,UAAU;AAC9CtB,iBAASD;AACT,eAAOoB,WAAU;MAClB;AAED,UAAInB;AAAQoB,mBAAU;IACxB,CAAC;AAED,QAAIxB,QAAQR,YAAY;AACtBS,eAASqB,GAAG,QAAQE,UAAU,EAAEF,GAAG,UAAUE,UAAU;IACxD;EACH;AAEA,WAASG,UAAO;AACdzB,gBAAY;AACZC,cAAU;AACVF,aAAS2B,IAAI,QAAQJ,UAAU,EAAEI,IAAI,UAAUJ,UAAU;AACzDvB,aAAS2B,IAAI,eAAeL,UAAU;AACtC,QAAI,CAACvB,QAAQN;AAAmBO,eAAS2B,IAAI,aAAaJ,UAAU;AACpED,eAAU;AACVM,yBAAqBxB,cAAc;AACnCA,qBAAiB;EACnB;AAEA,WAASmB,aAAU;AACjB,QAAItB;AAAW;AACf,QAAI,CAACE;AAAQ;AACb,QAAI,CAACD;AAASF,eAAS6B,KAAK,eAAe;AAC3C,UAAM;MAAEC;IAAa,IAAG9B,SAASkB,eAAc;AAC/CY,gBAAYC,cAAc1B,KAAK;AAC/BA,YAAQyB,YAAYE,YAAYC,MAAMlC,QAAQV,KAAK;AACnDa,cAAU;EACZ;AAEA,WAASoB,aAAU;AACjB,QAAIrB;AAAW;AACf,QAAIC;AAASF,eAAS6B,KAAK,eAAe;AAC1C,UAAM;MAAEC;IAAa,IAAG9B,SAASkB,eAAc;AAC/CY,gBAAYC,cAAc1B,KAAK;AAC/BA,YAAQ;AACRH,cAAU;EACZ;AAEA,WAASgC,KAAKC,cAAsB;AAClC,QAAI,OAAOA,iBAAiB;AAAa7C,aAAO6C;AAChDhC,aAAS;AACToB,eAAU;EACZ;AAEA,WAASa,OAAI;AACX,QAAIlC;AAASoB,iBAAU;EACzB;AAEA,WAASe,QAAK;AACZ,QAAInC;AAASgC,WAAI;EACnB;AAEA,WAASI,YAAS;AAChB,WAAOpC;EACT;AAEA,WAAS+B,OAAI;AACX7B,qBAAiBmC,sBAAsB,MAAK;AAC1C,YAAM;QAAEC;MAAO,IAAGxC,SAASkB,eAAc;AACzC,YAAMuB,YAAYD,MAAME,MAAK,EAAGlB,IAAI,CAAC,EAAEmB,IAAG;AAC1C,YAAMC,YAAY5C,SAASc,eAAc,EAAGC,SAAS;AACrD,YAAM8B,OAAO9C,QAAQJ,kBAAkB8C,cAAcG;AAErD,UAAIC;AAAMvB,mBAAU;AAEpB,UAAItB,SAAS8C,cAAa,GAAI;AAC5B9C,iBAAS+C,WAAWzD,IAAI;MACzB,OAAM;AACLU,iBAASgD,SAAS,GAAG1D,IAAI;MAC1B;IACH,CAAC;EACH;AAEA,QAAM2D,OAAqB;IACzBC,MAAM;IACNnD,SAASD;IACTQ;IACAoB;IACAQ;IACAE;IACAC;IACAC;;AAEF,SAAOW;AACT;AAEApD,SAASe,gBAAiDuC;",
  "names": ["defaultOptions", "active", "breakpoints", "delay", "jump", "playOnInit", "stopOnFocusIn", "stopOnInteraction", "stopOnMouseEnter", "stopOnLastSnap", "rootNode", "Autoplay", "userOptions", "options", "emblaApi", "destroyed", "playing", "resume", "animationFrame", "timer", "init", "emblaApiInstance", "optionsHandler", "mergeOptions", "optionsAtMedia", "optionsBase", "globalOptions", "allOptions", "scrollSnapList", "length", "eventStore", "ownerDocument", "internalEngine", "emblaRoot", "root", "on", "clearTimer", "startTimer", "add", "visibilityState", "destroy", "off", "cancelAnimationFrame", "emit", "ownerWindow", "clearInterval", "setInterval", "next", "play", "jumpOverride", "stop", "reset", "isPlaying", "requestAnimationFrame", "index", "nextIndex", "clone", "get", "lastIndex", "kill", "canScrollNext", "scrollNext", "scrollTo", "self", "name", "undefined"]
}
